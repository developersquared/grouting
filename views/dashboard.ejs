
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="icon" href="../../favicon.ico">
    <title>Dashboard</title>
    <!-- Bootstrap core CSS -->
    <link href="/assets/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css"> <!-- load fontawesome -->
    <style>
        /* tell the SVG path to be a thin blue line without any area fill */
        path {
            stroke: steelblue;
            stroke-width: 1;
            fill: none;
        }

        .axis {
            shape-rendering: crispEdges;
        }
        .x.axis line {
            stroke: lightgrey;
        }
        /*.x.axis .minor {
            stroke-opacity: .5;
        }*/
        .x.axis path {
            display: none;
        }
        .y.axis line, .y.axis path {
            fill: none;
            stroke: #000;
        }
    </style>
    <link rel="stylesheet" href="/assets/css/style.css">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>

    <![endif]-->
</head>
<body class="dashboard">
<% include ./partials/navbar %>
<div class="container-fluid dashboard-container">
    <div class="container">
        <div class="row system-status flex-container">
            <!--<div class="flex-item"><h2>시스템 상태 <span class="status-led-off"></span></h2></div>-->
            <div class="flex-item"><h2>진공 펌프 상태 <span class="status-led-off"></span></h2></div>
            <div class="flex-item"><h2>그라우트 펌프 상태 <span class="status-led-off"></span></h2></div>
            <div class="flex-item"><h2>통신 모듈 <span class="status-led-off"></span></h2></div>
        </div>
        <br />
        <div class="row input-pump">
            <div class="col-md-3">
                <h2>주입 펌프</h2>
            </div>
            <div class="col-md-9">
                <div class="row input-velocity">
                    <div class="col-xs-4">
                        <h4 class="data-title">주입 속도</h4>
                    </div>
                    <div class="col-xs-8 monitor-data">
                        <div class="col-sm-4">
                            <h4><%- JSON.stringify(data.grout_flow_meter) %></h4>
                        </div>
                        <div class="col-sm-8">
                            <div class="input-group">
                                <input type="number" class="form-control" placeholder="0000.000">
                                <span class="input-group-btn">
                                <button class="btn btn-default" type="button">Update</button>
                            </span>
                            </div><!-- /input-group -->
                        </div>
                    </div>
                </div>
                <div class="row input-pressure">
                    <div class="col-xs-4">
                        <h4 class="data-title">주입 압력</h4>
                    </div>
                    <div class="col-xs-6 monitor-data">
                        <div class="col-xs-12">
                            <h4><%- JSON.stringify(data.grout_press) %></h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <br />
        <div class="row vacuum-pump">
            <div class="col-md-3">
                <h2>진공 펌프</h2>
            </div>
            <div class="col-md-9">
                <div class="row input-velocity">
                    <div class="col-xs-4">
                        <h4 class="data-title">진공 압력</h4>
                    </div>
                    <div class="col-xs-8 monitor-data">
                        <div class="col-sm-4">
                            <h4><%- JSON.stringify(data.vacuum_meter) %></h4>
                        </div>
                        <div class="col-sm-8">
                            <div class="input-group">
                                <input type="number" class="form-control" placeholder="0000.000">
                                <span class="input-group-btn">
                                <button class="btn btn-default" type="button">Update</button>
                            </span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row input-pressure">
                    <div class="col-xs-4">
                        <h4 class="data-title">기체충실율</h4>
                    </div>
                    <div class="col-xs-6 monitor-data">
                        <div class="col-xs-12">
                            <h4>{0000.000}</h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <br />
        <div class="row air-vent">
            <div class="col-md-3">
                <h2>Air Vent</h2>
            </div>
            <div class="col-md-9">
                <div class="row input-velocity">
                    <div class="col-xs-4">
                        <h4 class="data-title">Air Vent-1</h4>
                    </div>
                    <div class="col-xs-6 monitor-data">
                        <div class="col-xs-12">
                            <h4><%- JSON.stringify(data.vent_1) %></h4>
                        </div>
                    </div>
                </div>
                <div class="row input-pressure">
                    <div class="col-xs-4">
                        <h4 class="data-title">Air Vent-2</h4>
                    </div>
                    <div class="col-xs-6 monitor-data">
                        <div class="col-xs-12">
                            <h4><%- JSON.stringify(data.vent_2) %></h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <br />
        <div class="row graph">
            <div class="col-md-3">
                <h2>Graph</h2>
            </div>
            <div class="col-md-12">
                <div id="linechart" style="position:absolute;top:0px;left:0; float:left;"></div>
            </div>
        </div>
    </div>
</div>

<!-- Bootstrap core JavaScript
================================================== -->
<!-- Placed at the end of the document so the pages load faster -->
<script src="http://code.jquery.com/jquery-1.11.0.min.js"></script>
<!--<script>window.jQuery || document.write('<script src="../../assets/js/vendor/jquery.min.js"><\/script>')</script>-->
<script src="/assets/bootstrap/js/bootstrap.js"></script>
<script src="http://d3js.org/d3.v2.min.js" charset="utf-8"></script>
<script>
    /* implementation heavily influenced by http://bl.ocks.org/1166403 */

    // define dimensions of graph
    var m = [40, 40, 40, 40]; // margins
    var w = 1140 - m[1] - m[3]; // width
    var h = 400 - m[0] - m[2]; // height

    // create a simple data array that we'll plot with a line (this array represents only the Y values, X will just be the index location)
    var data = [3, 6, 2, 7, 5, 2, 0, 3, 8, 9, 2, 5, 9, 3, 6, 3, 6, 2, 7, 5, 2, 1, 3, 8, 9, 2, 5, 9, 2, 7];
    // X scale will fit all values from data[] within pixels 0-w
    var x = d3.scale.linear().domain([0, data.length]).range([0, w]);
    // Y scale will fit values from 0-10 within pixels h-0 (Note the inverted domain for the y-scale: bigger is up!)
    var y = d3.scale.linear().domain([0, 10]).range([h, 0]);
    // automatically determining max range can work something like this
    // var y = d3.scale.linear().domain([0, d3.max(data)]).range([h, 0]);
    // create a line function that can convert data[] into x and y points
    var line = d3.svg.line()
    // assign the X function to plot our line as we wish
        .x(function(d,i) {
            // verbose logging to show what's actually being done
            console.log('Plotting X value for data point: ' + d + ' using index: ' + i + ' to be at: ' + x(i) + ' using our xScale.');
            // return the X coordinate where we want to plot this datapoint
            return x(i);
        })
        .y(function(d) {
            // verbose logging to show what's actually being done
            console.log('Plotting Y value for data point: ' + d + ' to be at: ' + y(d) + " using our yScale.");
            // return the Y coordinate where we want to plot this datapoint
            return y(d);
        })
    // Add an SVG element with the desired dimensions and margin.
    var graph = d3.select("#linechart").append("svg:svg")
        .attr("width", w + m[1] + m[3])
        .attr("height", h + m[0] + m[2])
        .append("svg:g")
        .attr("transform", "translate(" + m[3] + "," + m[0] + ")");
    // create yAxis
    var xAxis = d3.svg.axis().scale(x).tickSize(-h).tickSubdivide(true);
    // Add the x-axis.
    graph.append("svg:g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + h + ")")
        .call(xAxis);
    // create left yAxis
    var yAxisLeft = d3.svg.axis().scale(y).ticks(4).orient("left");
    // Add the y-axis to the left
    graph.append("svg:g")
        .attr("class", "y axis")
        .attr("transform", "translate(-25,0)")
        .call(yAxisLeft);

    // Add the line by appending an svg:path element with the data line we created above
    // do this AFTER the axes above so that the line is above the tick-lines
    graph.append("svg:path").attr("d", line(data));

</script>
</body>
</html>
